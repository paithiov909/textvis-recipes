[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cookbook to Draw KHCoder-like Visualizations Using R",
    "section": "",
    "text": "Preface\n\nCooking icons created by Freepik - Flaticon\n\n本文についてはCC-BY、掲載されているコードについてはMITライセンスを適用するものとします。\nなんとなく似たような表現をめざしているだけで、KH Coderでおこなわれている処理をRで再実装することをめざすものではありません。また、論文やレポートに掲載するといったことを想定しているわけではないので、わりと躊躇なくHTMLウィジェットを使っています。\nKH Coderの機能や可視化をもとにしているのではない表現については、小見出しに🍳という絵文字を付けています。",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "preproc-menu.html",
    "href": "preproc-menu.html",
    "title": "1  前処理メニュー",
    "section": "",
    "text": "1.1 使用するデータセット\nKH Coderのチュートリアル用のデータを使う。tutorial_data_3x.zipの中に含まれているtutorial_jp/kokoro.xlsというxlsファイルを次のように読み込んでおく。\nCode\ntbl &lt;-\n  readxl::read_xls(\"tutorial_jp/kokoro.xls\",\n    col_names = c(\"text\", \"section\", \"chapter\", \"label\"),\n    skip = 1\n  ) |&gt;\n  dplyr::mutate(\n    doc_id = dplyr::row_number(),\n    dplyr::across(where(is.character), ~ audubon::strj_normalize(.))\n  ) |&gt;\n  dplyr::filter(!gibasa::is_blank(text)) |&gt;\n  dplyr::relocate(doc_id, text, section, label, chapter)\n\ntbl\n#&gt; # A tibble: 1,213 × 5\n#&gt;    doc_id text                                            section label  chapter\n#&gt;     &lt;int&gt; &lt;chr&gt;                                           &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;  \n#&gt;  1      1 私はその人を常に先生と呼んでいた。だからここで… [1]上_… 上・一 1_01   \n#&gt;  2      2 私が先生と知り合いになったのは鎌倉である。その… [1]上_… 上・一 1_01   \n#&gt;  3      3 学校の授業が始まるにはまだ大分日数があるので鎌… [1]上_… 上・一 1_01   \n#&gt;  4      4 宿は鎌倉でも辺鄙な方角にあった。玉突きだのアイ… [1]上_… 上・一 1_01   \n#&gt;  5      5 私は毎日海へはいりに出掛けた。古い燻ぶり返った… [1]上_… 上・一 1_01   \n#&gt;  6      6 私は実に先生をこの雑沓の間に見付け出したのであ… [1]上_… 上・一 1_01   \n#&gt;  7      7 私がその掛茶屋で先生を見た時は、先生がちょうど… [1]上_… 上・二 1_02   \n#&gt;  8      8 その西洋人の優れて白い皮膚の色が、掛茶屋へ入る… [1]上_… 上・二 1_02   \n#&gt;  9      9 彼はやがて自分の傍を顧みて、そこにこごんでいる… [1]上_… 上・二 1_02   \n#&gt; 10     10 私は単に好奇心のために、並んで浜辺を下りて行く… [1]上_… 上・二 1_02   \n#&gt; # ℹ 1,203 more rows\nこのデータでは、夏目漱石の『こころ』が段落（doc_id）ごとにひとつのテキストとして打ち込まれている。『こころ』は上中下の3部（section）で構成されていて、それぞれの部が複数の章（label, chapter）に分かれている。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>前処理メニュー</span>"
    ]
  },
  {
    "objectID": "preproc-menu.html#語の抽出a.2.2",
    "href": "preproc-menu.html#語の抽出a.2.2",
    "title": "1  前処理メニュー",
    "section": "1.2 語の抽出（A.2.2）",
    "text": "1.2 語の抽出（A.2.2）\ngibasaを使って形態素解析をおこない、語を抽出する。\nこのデータをIPA辞書を使って形態素解析すると、延べ語数は105,000語程度になる。これくらいの語数であれば、形態素解析した結果をデータフレームとしてメモリ上に読み込んでも問題ないと思われるが、ここではより大規模なテキストデータを扱う場合を想定し、結果をDuckDBデータベースに書き込むことにする。\nここではchapterごとにグルーピングしながら、段落は文に分割せずに処理している。MeCabはバッファサイズの都合上、一度に262万字くらいまで一つの文として入力できるらしいが、極端に長い入力に対してはコスト計算ができず、エラーが出る可能性がある。また、多くの文を与えればそれだけ多くの行からなるデータフレームが返されるため、一度に処理する分量は利用している環境にあわせて適当に加減したほうがよい。\nKH Coderでは、IPA辞書の品詞体系をもとに変更した品詞体系が使われている。そのため、KH Coderで前処理した結果をある程度再現するためには、一部の品詞情報を書き換える必要がある。KH Coder内で使われている品詞体系については、KH Coderのレファレンスを参照されたい。\nまた、このデータを使っているチュートリアルでは、強制抽出する語として「一人」「二人」という語を指定している。こうした語についてはMeCabのユーザー辞書に追加してしまったほうがよいが、簡単に処理するために、ここではgibasaの制約付き解析機能によって「タグ」として抽出している（KH Coderは強制抽出した語に対して「タグ」という品詞名を与える）。\n\n\nCode\nsuppressPackageStartupMessages({\n  library(duckdb)\n})\ndrv &lt;- duckdb::duckdb()\n\nif (!fs::file_exists(\"tutorial_jp/kokoro.duckdb\")) {\n  con &lt;- duckdb::dbConnect(drv, dbdir = \"tutorial_jp/kokoro.duckdb\", read_only = FALSE)\n\n  dbCreateTable(\n    con, \"tokens\",\n    data.frame(\n      doc_id = integer(),\n      section = character(),\n      label = character(),\n      token_id = integer(),\n      token = character(),\n      pos = character(),\n      original = character(),\n      stringsAsFactors = FALSE\n    )\n  )\n\n  tbl |&gt;\n    dplyr::group_by(chapter) |&gt;\n    dplyr::group_walk(~ {\n      df &lt;- .x |&gt;\n        dplyr::mutate(\n          text = stringi::stri_replace_all_regex(text, \"(?&lt;codes&gt;([一二三四五六七八九]{1}人))\", \"\\n${codes}\\tタグ\\n\") |&gt;\n            stringi::stri_trim_both()\n        ) |&gt;\n        gibasa::tokenize(text, doc_id, partial = TRUE) |&gt;\n        gibasa::prettify(\n          col_select = c(\"POS1\", \"POS2\", \"POS3\", \"Original\")\n        ) |&gt;\n        dplyr::mutate(\n          pos = dplyr::case_when(\n            (POS1 == \"タグ\") ~ \"タグ\",\n            (is.na(Original) & stringr::str_detect(token, \"^[[:alpha:]]+$\")) ~ \"未知語\",\n            (POS1 == \"感動詞\") ~ \"感動詞\",\n            (POS1 == \"名詞\" & POS2 == \"一般\" & stringr::str_detect(token, \"^[\\\\p{Han}]{1}$\")) ~ \"名詞C\",\n            (POS1 == \"名詞\" & POS2 == \"一般\" & stringr::str_detect(token, \"^[\\\\p{Hiragana}]+$\")) ~ \"名詞B\",\n            (POS1 == \"名詞\" & POS2 == \"一般\") ~ \"名詞\",\n            (POS1 == \"名詞\" & POS2 == \"固有名詞\" & POS3 == \"地域\") ~ \"地名\",\n            (POS1 == \"名詞\" & POS2 == \"固有名詞\" & POS3 == \"人名\") ~ \"人名\",\n            (POS1 == \"名詞\" & POS2 == \"固有名詞\" & POS3 == \"組織\") ~ \"組織名\",\n            (POS1 == \"名詞\" & POS2 == \"形容動詞語幹\") ~ \"形容動詞\",\n            (POS1 == \"名詞\" & POS2 == \"ナイ形容詞語幹\") ~ \"ナイ形容詞\",\n            (POS1 == \"名詞\" & POS2 == \"固有名詞\") ~ \"固有名詞\",\n            (POS1 == \"名詞\" & POS2 == \"サ変接続\") ~ \"サ変名詞\",\n            (POS1 == \"名詞\" & POS2 == \"副詞可能\") ~ \"副詞可能\",\n            (POS1 == \"動詞\" & POS2 == \"自立\" & stringr::str_detect(token, \"^[\\\\p{Hiragana}]+$\")) ~ \"動詞B\",\n            (POS1 == \"動詞\" & POS2 == \"自立\") ~ \"動詞\",\n            (POS1 == \"形容詞\" & stringr::str_detect(token, \"^[\\\\p{Hiragana}]+$\")) ~ \"形容詞B\",\n            (POS1 == \"形容詞\" & POS2 == \"非自立\") ~ \"形容詞（非自立）\",\n            (POS1 == \"形容詞\") ~ \"形容詞\",\n            (POS1 == \"副詞\" & stringr::str_detect(token, \"^[\\\\p{Hiragana}]+$\")) ~ \"副詞B\",\n            (POS1 == \"副詞\") ~ \"副詞\",\n            (POS1 == \"助動詞\" & Original %in% c(\"ない\", \"まい\", \"ぬ\", \"ん\")) ~ \"否定助動詞\",\n            .default = \"その他\"\n          )\n        ) |&gt;\n        dplyr::select(doc_id, section, label, token_id, token, pos, Original) |&gt;\n        dplyr::rename(original = Original)\n\n      dbAppendTable(con, \"tokens\", df)\n    })\n} else {\n  con &lt;- duckdb::dbConnect(drv, dbdir = \"tutorial_jp/kokoro.duckdb\", read_only = TRUE)\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>前処理メニュー</span>"
    ]
  },
  {
    "objectID": "preproc-menu.html#コーディングルールa.2.5",
    "href": "preproc-menu.html#コーディングルールa.2.5",
    "title": "1  前処理メニュー",
    "section": "1.3 コーディングルール（A.2.5）",
    "text": "1.3 コーディングルール（A.2.5）\nKH Coderの強力な機能のひとつとして、「コーディングルール」によるトークンへのタグ付けというのがある。KH Coderのコーディングルールはかなり複雑な記法を扱うため、Rで完璧に再現するには相応の手間がかかる。一方で、コードを与えるべき抽出語を基本形とマッチングする程度であれば、次のように比較的少ないコード量で似たようなことを実現できる。\n\n\nCode\nrules &lt;- list(\n  \"人の死\" = c(\"死後\", \"死病\", \"死期\", \"死因\", \"死骸\", \"生死\", \"自殺\", \"殉死\", \"頓死\", \"変死\", \"亡\", \"死ぬ\", \"亡くなる\", \"殺す\", \"亡くす\", \"死\"),\n  \"恋愛\" = c(\"愛\", \"恋\", \"愛す\", \"愛情\", \"恋人\", \"愛人\", \"恋愛\", \"失恋\", \"恋しい\"),\n  \"友情\" = c(\"友達\", \"友人\", \"旧友\", \"親友\", \"朋友\", \"友\", \"級友\"),\n  \"信用・不信\" = c(\"信用\", \"信じる\", \"信ずる\", \"不信\", \"疑い\", \"疑惑\", \"疑念\", \"猜疑\", \"狐疑\", \"疑問\", \"疑い深い\", \"疑う\", \"疑る\", \"警戒\"),\n  \"病気\" = c(\"医者\", \"病人\", \"病室\", \"病院\", \"病症\", \"病状\", \"持病\", \"死病\", \"主治医\", \"精神病\", \"仮病\", \"病気\", \"看病\", \"大病\", \"病む\", \"病\")\n)\n\ncodes &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(original %in% purrr::flatten_chr(rules)) |&gt;\n  dplyr::collect() |&gt;\n  dplyr::mutate(\n    codings = purrr::map(\n      original,\n      ~ purrr::imap(rules, \\(.x, .y) tibble::tibble(code = .y, flag = . %in% .x)) |&gt;\n        purrr::list_rbind() |&gt;\n        dplyr::filter(flag == TRUE) |&gt;\n        dplyr::select(!flag)\n    )\n  ) |&gt;\n  tidyr::unnest(codings)\n\ncodes\n#&gt; # A tibble: 537 × 8\n#&gt;    doc_id section        label  token_id token    pos      original code      \n#&gt;     &lt;int&gt; &lt;chr&gt;          &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     \n#&gt;  1      2 [1]上_先生と私 上・一       36 友達     名詞     友達     友情      \n#&gt;  2      2 [1]上_先生と私 上・一       96 友達     名詞     友達     友情      \n#&gt;  3      2 [1]上_先生と私 上・一      115 病気     サ変名詞 病気     病気      \n#&gt;  4      2 [1]上_先生と私 上・一      124 友達     名詞     友達     友情      \n#&gt;  5      2 [1]上_先生と私 上・一      128 信じ     動詞     信じる   信用・不信\n#&gt;  6      2 [1]上_先生と私 上・一      132 友達     名詞     友達     友情      \n#&gt;  7      2 [1]上_先生と私 上・一      240 病気     サ変名詞 病気     病気      \n#&gt;  8      3 [1]上_先生と私 上・一       44 友達     名詞     友達     友情      \n#&gt;  9     19 [1]上_先生と私 上・三      207 疑っ     動詞     疑う     信用・不信\n#&gt; 10     21 [1]上_先生と私 上・四      161 亡くなっ 動詞     亡くなる 人の死    \n#&gt; # ℹ 527 more rows",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>前処理メニュー</span>"
    ]
  },
  {
    "objectID": "preproc-menu.html#抽出語リストa.3.4",
    "href": "preproc-menu.html#抽出語リストa.3.4",
    "title": "1  前処理メニュー",
    "section": "1.4 抽出語リスト（A.3.4）",
    "text": "1.4 抽出語リスト（A.3.4）\n「エクスポート」メニューから得られるような抽出語リストをデータフレームとして得る例。\nExcel向けの出力は見やすいようにカラムを分けているが、Rのデータフレームとして扱うならtidyな縦長のデータにしたほうがよい。\n\n1.4.1 品詞別・上位15語\n\n\nCode\ndplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    !pos %in% c(\"その他\", \"名詞B\", \"動詞B\", \"形容詞B\", \"副詞B\", \"否定助動詞\", \"形容詞（非自立）\")\n  ) |&gt;\n  dplyr::mutate(token = dplyr::if_else(is.na(original), token, original)) |&gt;\n  dplyr::count(token, pos) |&gt;\n  dplyr::slice_max(n, n = 15, by = pos) |&gt;\n  dplyr::collect()\n#&gt; # A tibble: 232 × 3\n#&gt;    token    pos          n\n#&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;dbl&gt;\n#&gt;  1 毎日     組織名       1\n#&gt;  2 浦       組織名       1\n#&gt;  3 毎日新聞 組織名       1\n#&gt;  4 丸善     組織名       1\n#&gt;  5 急       形容動詞    54\n#&gt;  6 変       形容動詞    43\n#&gt;  7 必要     形容動詞    42\n#&gt;  8 自然     形容動詞    31\n#&gt;  9 厭       形容動詞    29\n#&gt; 10 大変     形容動詞    28\n#&gt; # ℹ 222 more rows\n\n\n\n\n1.4.2 頻出150語\n\n\nCode\ndplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    !pos %in% c(\"その他\", \"名詞B\", \"動詞B\", \"形容詞B\", \"副詞B\", \"否定助動詞\", \"形容詞（非自立）\")\n  ) |&gt;\n  dplyr::mutate(token = dplyr::if_else(is.na(original), token, original)) |&gt;\n  dplyr::count(token, pos) |&gt;\n  dplyr::slice_max(n, n = 150) |&gt;\n  dplyr::collect()\n#&gt; # A tibble: 152 × 3\n#&gt;    token  pos        n\n#&gt;    &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt;\n#&gt;  1 先生   名詞     595\n#&gt;  2 K      未知語   411\n#&gt;  3 奥さん 名詞     388\n#&gt;  4 思う   動詞     293\n#&gt;  5 父     名詞C    269\n#&gt;  6 自分   名詞     264\n#&gt;  7 見る   動詞     225\n#&gt;  8 聞く   動詞     218\n#&gt;  9 出る   動詞     179\n#&gt; 10 人     名詞C    176\n#&gt; # ℹ 142 more rows",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>前処理メニュー</span>"
    ]
  },
  {
    "objectID": "preproc-menu.html#文書抽出語表a.3.5",
    "href": "preproc-menu.html#文書抽出語表a.3.5",
    "title": "1  前処理メニュー",
    "section": "1.5 「文書・抽出語」表（A.3.5）",
    "text": "1.5 「文書・抽出語」表（A.3.5）\nいわゆる文書単語行列の例。dplyr::collectした後にtidyr::pivot_wider()などで横に展開してもよいが、多くの場合、疎行列のオブジェクトにしてしまったほうが、この後にRでの解析に用いる上では扱いやすいと思われる。quantedaのdfmオブジェクトをふつうの密な行列にしたいときは、as.matrix(dfm)すればよい。\n\n\nCode\ndfm &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    !pos %in% c(\"その他\", \"名詞B\", \"動詞B\", \"形容詞B\", \"副詞B\", \"否定助動詞\", \"形容詞（非自立）\")\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::count(doc_id, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::cast_dfm(doc_id, token, n) |&gt;\n  quanteda::dfm_trim(min_termfreq = 75, termfreq_type = \"rank\")\n\nquanteda::docvars(dfm, \"section\") &lt;-\n  dplyr::filter(tbl, doc_id %in% quanteda::docnames(dfm)) |&gt;\n  dplyr::pull(\"section\")\n\ndfm\n#&gt; Document-feature matrix of: 1,189 documents, 76 features (92.93% sparse) and 1 docvar.\n#&gt;     features\n#&gt; docs 急/形容動詞 手/名詞C 男/名詞C 二人/タグ 間/名詞C 出す/動詞 頭/名詞C\n#&gt;    1           0        0        0         0        0         0        0\n#&gt;    2           1        0        0         0        0         0        0\n#&gt;    3           0        0        1         0        0         0        0\n#&gt;    4           0        1        0         0        0         0        0\n#&gt;    5           0        0        1         0        1         0        1\n#&gt;    6           0        0        0         0        1         0        0\n#&gt;     features\n#&gt; docs 帰る/動詞 先生/名詞 来る/動詞\n#&gt;    1         0         3         0\n#&gt;    2         4         1         2\n#&gt;    3         1         0         0\n#&gt;    4         0         0         0\n#&gt;    5         0         0         1\n#&gt;    6         0         1         0\n#&gt; [ reached max_ndoc ... 1,183 more documents, reached max_nfeat ... 66 more features ]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>前処理メニュー</span>"
    ]
  },
  {
    "objectID": "preproc-menu.html#文書コード表a.3.6",
    "href": "preproc-menu.html#文書コード表a.3.6",
    "title": "1  前処理メニュー",
    "section": "1.6 「文書・コード」表（A.3.6）",
    "text": "1.6 「文書・コード」表（A.3.6）\n「文書・コード」行列の例。コードの出現頻度ではなく「コードの有無をあらわす2値変数」を出力する。\n\n\nCode\ndfm &lt;- codes |&gt;\n  dplyr::count(doc_id, code) |&gt;\n  tidytext::cast_dfm(doc_id, code, n) |&gt;\n  quanteda::dfm_weight(scheme = \"boolean\")\n\nquanteda::docvars(dfm, \"section\") &lt;-\n  dplyr::filter(tbl, doc_id %in% quanteda::docnames(dfm)) |&gt;\n  dplyr::pull(\"section\")\n\ndfm\n#&gt; Document-feature matrix of: 294 documents, 5 features (76.19% sparse) and 1 docvar.\n#&gt;     features\n#&gt; docs 信用・不信 友情 病気 人の死 恋愛\n#&gt;   2           1    1    1      0    0\n#&gt;   3           0    1    0      0    0\n#&gt;   19          1    0    0      0    0\n#&gt;   21          0    0    0      1    0\n#&gt;   37          0    0    0      1    0\n#&gt;   49          0    1    0      0    0\n#&gt; [ reached max_ndoc ... 288 more documents ]\n\n\n\n\n\nCode\nduckdb::dbDisconnect(con)\nduckdb::duckdb_shutdown(drv)\n\nsessioninfo::session_info(info = \"packages\")\n#&gt; ═ Session info ═══════════════════════════════════════════════════════════════\n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package      * version    date (UTC) lib source\n#&gt;  audubon        0.5.1.9001 2023-09-03 [1] https://paithiov909.r-universe.dev (R 4.3.1)\n#&gt;  blob           1.2.4      2023-03-17 [1] RSPM (R 4.3.0)\n#&gt;  cachem         1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n#&gt;  cellranger     1.1.0      2016-07-27 [1] RSPM (R 4.3.0)\n#&gt;  cli            3.6.2      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt;  curl           5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  DBI          * 1.2.2      2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;  dbplyr         2.4.0      2023-10-26 [1] RSPM (R 4.3.0)\n#&gt;  digest         0.6.34     2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;  dplyr          1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  duckdb       * 0.9.2-1    2023-11-28 [1] RSPM (R 4.3.2)\n#&gt;  evaluate       0.23       2023-11-01 [1] CRAN (R 4.3.1)\n#&gt;  fansi          1.0.6      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  fastmap        1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n#&gt;  fastmatch      1.1-4      2023-08-18 [1] RSPM (R 4.3.0)\n#&gt;  fs             1.6.3      2023-07-20 [1] RSPM (R 4.3.1)\n#&gt;  generics       0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n#&gt;  gibasa         1.1.0      2024-02-17 [1] https://paithiov909.r-universe.dev (R 4.3.2)\n#&gt;  glue           1.7.0      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;  htmltools      0.5.7      2023-11-03 [1] RSPM (R 4.3.0)\n#&gt;  htmlwidgets    1.6.4      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  httpgd         1.3.1      2023-01-30 [1] CRAN (R 4.3.0)\n#&gt;  janeaustenr    1.0.0      2022-08-26 [1] RSPM (R 4.3.0)\n#&gt;  jsonlite       1.8.8      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;  knitr          1.45       2023-10-30 [1] CRAN (R 4.3.1)\n#&gt;  later          1.3.2      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  lattice        0.22-5     2023-10-24 [4] CRAN (R 4.3.1)\n#&gt;  lifecycle      1.0.4      2023-11-07 [1] RSPM (R 4.3.0)\n#&gt;  magrittr       2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n#&gt;  Matrix         1.6-3      2023-11-14 [4] CRAN (R 4.3.2)\n#&gt;  memoise        2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n#&gt;  pillar         1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n#&gt;  pkgconfig      2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n#&gt;  purrr          1.0.2      2023-08-10 [1] RSPM (R 4.3.0)\n#&gt;  quanteda       3.3.1      2023-05-18 [1] RSPM (R 4.3.0)\n#&gt;  R.cache        0.16.0     2022-07-21 [1] CRAN (R 4.3.0)\n#&gt;  R.methodsS3    1.8.2      2022-06-13 [1] CRAN (R 4.3.0)\n#&gt;  R.oo           1.26.0     2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  R.utils        2.12.3     2023-11-18 [1] CRAN (R 4.3.2)\n#&gt;  R6             2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n#&gt;  Rcpp           1.0.12     2024-01-09 [1] RSPM (R 4.3.0)\n#&gt;  RcppParallel   5.1.7      2023-02-27 [1] CRAN (R 4.3.0)\n#&gt;  readxl         1.4.3      2023-07-06 [1] RSPM (R 4.3.0)\n#&gt;  rlang          1.1.3      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  rmarkdown      2.25       2023-09-18 [1] RSPM (R 4.3.0)\n#&gt;  sessioninfo    1.2.2      2021-12-06 [1] RSPM (R 4.3.0)\n#&gt;  SnowballC      0.7.1      2023-04-25 [1] RSPM (R 4.3.0)\n#&gt;  stopwords      2.3        2021-10-28 [1] RSPM (R 4.3.0)\n#&gt;  stringi        1.8.3      2024-01-28 [1] https://gagolews.r-universe.dev (R 4.3.2)\n#&gt;  styler         1.10.2     2023-08-29 [1] RSPM (R 4.3.0)\n#&gt;  systemfonts    1.0.5      2023-10-09 [1] RSPM (R 4.3.0)\n#&gt;  tibble         3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n#&gt;  tidyr          1.3.1      2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  tidyselect     1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n#&gt;  tidytext       0.4.1      2023-01-07 [1] RSPM (R 4.3.0)\n#&gt;  tokenizers     0.3.0      2022-12-22 [1] RSPM (R 4.3.0)\n#&gt;  utf8           1.2.4      2023-10-22 [1] RSPM (R 4.3.0)\n#&gt;  V8             4.4.2      2024-02-15 [1] CRAN (R 4.3.2)\n#&gt;  vctrs          0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;  withr          3.0.0      2024-01-16 [1] RSPM (R 4.3.0)\n#&gt;  xfun           0.42       2024-02-08 [1] CRAN (R 4.3.2)\n#&gt;  yaml           2.3.8      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt; \n#&gt;  [1] /home/paithiov909/R/x86_64-pc-linux-gnu-library/4.3\n#&gt;  [2] /usr/local/lib/R/site-library\n#&gt;  [3] /usr/lib/R/site-library\n#&gt;  [4] /usr/lib/R/library\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>前処理メニュー</span>"
    ]
  },
  {
    "objectID": "words-menu-1.html",
    "href": "words-menu-1.html",
    "title": "2  抽出語メニュー1",
    "section": "",
    "text": "2.1 抽出語リスト（A.5.1）\n活用語をクリックするとそれぞれの活用の出現頻度も見れるUIについては、Rだとどうすれば実現できるかわからない。\nCode\ndat &lt;- dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    !pos %in% c(\"その他\", \"名詞B\", \"動詞B\", \"形容詞B\", \"副詞B\", \"否定助動詞\", \"形容詞（非自立）\")\n  ) |&gt;\n  dplyr::count(token, pos) |&gt;\n  dplyr::filter(n &gt;= 100) |&gt;\n  dplyr::collect()\n\nreactable::reactable(\n  dat,\n  filterable = TRUE,\n  defaultColDef = reactable::colDef(\n    cell = reactablefmtr::data_bars(dat)\n  )\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>抽出語メニュー1</span>"
    ]
  },
  {
    "objectID": "words-menu-1.html#出現回数の分布a.5.2",
    "href": "words-menu-1.html#出現回数の分布a.5.2",
    "title": "2  抽出語メニュー1",
    "section": "2.2 出現回数の分布（A.5.2）",
    "text": "2.2 出現回数の分布（A.5.2）\n\n2.2.1 度数分布表\n\n\nCode\ndat &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    !pos %in% c(\"その他\", \"名詞B\", \"動詞B\", \"形容詞B\", \"副詞B\", \"否定助動詞\", \"形容詞（非自立）\")\n  ) |&gt;\n  dplyr::count(token, pos) |&gt;\n  dplyr::summarise(\n    degree = sum(n, na.rm = TRUE),\n    .by = n\n  ) |&gt;\n  dplyr::mutate(\n    prop = degree / sum(degree, na.rm = TRUE)\n  ) |&gt;\n  dplyr::arrange(n) |&gt;\n  dplyr::compute() |&gt;\n  dplyr::mutate(\n    cum_degree = cumsum(degree),\n    cum_prop = cumsum(prop)\n  ) |&gt;\n  dplyr::collect()\n\ndat\n#&gt; # A tibble: 98 × 5\n#&gt;        n degree   prop cum_degree cum_prop\n#&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1     1   2938 0.111        2938    0.111\n#&gt;  2     2   1934 0.0729       4872    0.184\n#&gt;  3     3   1506 0.0568       6378    0.240\n#&gt;  4     4   1248 0.0470       7626    0.287\n#&gt;  5     5    955 0.0360       8581    0.323\n#&gt;  6     6    768 0.0289       9349    0.352\n#&gt;  7     7    868 0.0327      10217    0.385\n#&gt;  8     8    592 0.0223      10809    0.407\n#&gt;  9     9    531 0.0200      11340    0.427\n#&gt; 10    10    570 0.0215      11910    0.449\n#&gt; # ℹ 88 more rows\n\n\n\n\n2.2.2 折れ線グラフ\n\n\nCode\ndat |&gt;\n  dplyr::filter(cum_prop &lt; .8) |&gt;\n  ggplot(aes(x = n, y = degree)) +\n  geom_line() +\n  theme_bw() +\n  labs(x = \"出現回数\", y = \"度数\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>抽出語メニュー1</span>"
    ]
  },
  {
    "objectID": "words-menu-1.html#文書数の分布a.5.3",
    "href": "words-menu-1.html#文書数の分布a.5.3",
    "title": "2  抽出語メニュー1",
    "section": "2.3 文書数の分布（A.5.3）",
    "text": "2.3 文書数の分布（A.5.3）\n\n2.3.1 ヒストグラム🍳\n段落（doc_id）ではなく、章ラベル（label）でグルーピングして集計している。docfreqについて上でやったのと同様に処理すれば度数分布表にできる。\n\n\nCode\ndat &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::mutate(token = paste(token, pos, sep = \"/\")) |&gt;\n  dplyr::count(label, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::cast_dfm(label, token, n) |&gt;\n  quanteda.textstats::textstat_frequency() |&gt;\n  dplyr::as_tibble()\n\ndat\n#&gt; # A tibble: 7,140 × 5\n#&gt;    feature   frequency  rank docfreq group\n#&gt;    &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;\n#&gt;  1 の/その他      5801     1     110 all  \n#&gt;  2 た/その他      5396     2     110 all  \n#&gt;  3 。/その他      4648     3     110 all  \n#&gt;  4 は/その他      4148     4     110 all  \n#&gt;  5 に/その他      4104     5     110 all  \n#&gt;  6 、/その他      3646     6     110 all  \n#&gt;  7 て/その他      3403     7     110 all  \n#&gt;  8 を/その他      3216     8     110 all  \n#&gt;  9 私/その他      2694     9     110 all  \n#&gt; 10 が/その他      2194    10     110 all  \n#&gt; # ℹ 7,130 more rows\n\n\n度数分布をグラフで確認したいだけなら、このかたちからヒストグラムを描いたほうが楽。\n\n\nCode\ndat |&gt;\n  ggplot(aes(x = docfreq)) +\n  geom_histogram(binwidth = 3) +\n  scale_y_sqrt() +\n  theme_bw() +\n  labs(x = \"文書数\", y = \"度数\")\n\n\n\n\n\n\n\n\n\n\n\n2.3.2 Zip’s law🍳\nよく見かけるグラフ。言語処理100本ノック 2020の39はこれにあたる。\n\n\nCode\ndat |&gt;\n  ggplot(aes(x = rank, y = frequency)) +\n  geom_line() +\n  geom_smooth(method = lm, formula = y ~ x, se = FALSE) +\n  scale_x_log10() +\n  scale_y_log10() +\n  theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>抽出語メニュー1</span>"
    ]
  },
  {
    "objectID": "words-menu-1.html#出現回数文書数のプロットa.5.4",
    "href": "words-menu-1.html#出現回数文書数のプロットa.5.4",
    "title": "2  抽出語メニュー1",
    "section": "2.4 出現回数・文書数のプロット（A.5.4）",
    "text": "2.4 出現回数・文書数のプロット（A.5.4）\n図 A.25のようなグラフの例。ggplot2でgraphics::identifyのようなことをするやり方がわからないので、適当に条件を指定してgghighlightでハイライトしている。\n\n\nCode\ndat |&gt;\n  ggplot(aes(x = frequency, y = docfreq)) +\n  geom_jitter() +\n  gghighlight::gghighlight(\n    frequency &gt; 100 & docfreq &lt; 60\n  ) +\n  ggrepel::geom_text_repel(aes(label = feature)) +\n  scale_x_log10() +\n  theme_bw() +\n  labs(x = \"出現回数\", y = \"文書数\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>抽出語メニュー1</span>"
    ]
  },
  {
    "objectID": "words-menu-1.html#kwica.5.5",
    "href": "words-menu-1.html#kwica.5.5",
    "title": "2  抽出語メニュー1",
    "section": "2.5 KWIC（A.5.5）",
    "text": "2.5 KWIC（A.5.5）\n\n2.5.1 コンコーダンス\nコンコーダンスはquanteda::kwic()で確認できる。もっとも、KH Coderの提供するコンコーダンス検索やコロケーション統計のほうが明らかにリッチなのと、Rのコンソールは日本語の長めの文字列を表示するのにあまり向いていないというのがあるので、このあたりの機能が必要ならKH Coderを利用したほうがよい。\n\n\nCode\ndat &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(section == \"[1]上_先生と私\") |&gt;\n  dplyr::select(label, token) |&gt;\n  dplyr::collect() |&gt;\n  dplyr::reframe(token = list(token), .by = label) |&gt;\n  tibble::deframe() |&gt;\n  quanteda::as.tokens() |&gt;\n  quanteda::tokens_select(\"[[:punct:]]\", selection = \"remove\", valuetype = \"regex\", padding = FALSE) |&gt;\n  quanteda::tokens_select(\"^[\\\\p{Hiragana}]{1,2}$\", selection = \"remove\", valuetype = \"regex\", padding = TRUE)\n\nquanteda::kwic(dat, pattern = \"^向[いくけこ]$\", window = 5, valuetype = \"regex\")\n#&gt; Keyword-in-context with 18 matches.                                                                   \n#&gt;      [上・二, 183]            海 方 | 向い | 立っ                  \n#&gt;      [上・二, 527]            沖 方 | 向い | 行っ それから 引き返し\n#&gt;      [上・七, 740]            外 方 | 向い | 今 手                 \n#&gt;      [上・八, 622]            私 方 | 向い | 私                    \n#&gt;      [上・八, 697]            私 方 | 向い | 子供                  \n#&gt;    [上・十二, 568]        花 そちら | 向い | 眼 峙                 \n#&gt;    [上・十二, 628]          方角 足 | 向け | それから 私           \n#&gt;    [上・十四, 247]            庭 方 | 向い | 庭 この間             \n#&gt;    [上・十五, 661]      奥さん 差し | 向い | 話 なけれ             \n#&gt;    [上・十六, 265]            眼 私 | 向け | そうして 客 来        \n#&gt;    [上・十七, 447]    世の中 どっち | 向い | 面白                  \n#&gt;  [上・二十五, 557]        世間 背中 | 向け | 人 苦味               \n#&gt;  [上・二十六, 480]                  | 向い | 歩い やがて 若葉      \n#&gt;  [上・三十三, 686]            庭 方 | 向い | 澄まし 烟草           \n#&gt;  [上・三十三, 771] 先生 ちょっと 顔 | 向け | 直し 奥さん 言葉      \n#&gt;  [上・三十四, 415]               下 | 向い | 私 父                 \n#&gt;  [上・三十四, 436]   突然 奥さん 方 | 向い | 静 お前               \n#&gt;  [上・三十五, 425]            庭 方 | 向い | 笑っ しかし\n\n\nなお、上の例ではひらがな1～2文字の語をpaddingしつつ除外したので、一部の助詞などは表示されていない（それぞれの窓のなかでトークンとして数えられてはいる）。\n\n\n2.5.2 コロケーション\nたとえば、前後5個のwindow内のコロケーション（nodeを含めて11語の窓ということ）の合計については次のように確認できる。\n\n\nCode\ndat |&gt;\n  quanteda::fcm(context = \"window\", window = 5) |&gt;\n  tidytext::tidy() |&gt;\n  dplyr::rename(node = document, term = term) |&gt;\n  dplyr::filter(node == \"向い\") |&gt;\n  dplyr::slice_max(count, n = 10)\n#&gt; # A tibble: 30 × 3\n#&gt;    node  term     count\n#&gt;    &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt;\n#&gt;  1 向い  庭           4\n#&gt;  2 向い  奥さん       2\n#&gt;  3 向い  立っ         1\n#&gt;  4 向い  眼           1\n#&gt;  5 向い  やがて       1\n#&gt;  6 向い  沖           1\n#&gt;  7 向い  それから     1\n#&gt;  8 向い  引き返し     1\n#&gt;  9 向い  烟草         1\n#&gt; 10 向い  しかし       1\n#&gt; # ℹ 20 more rows\n\n\n「左合計」や「右合計」については、たとえば次のようにして確認できる。paddingしなければtidyr::separate_wider_delim()で展開して位置ごとに集計することもできそう。\n\n\nCode\ndat |&gt;\n  quanteda::kwic(pattern = \"^向[いくけこ]$\", window = 5, valuetype = \"regex\") |&gt;\n  dplyr::as_tibble() |&gt;\n  dplyr::select(docname, keyword, pre, post) |&gt;\n  tidyr::pivot_longer(\n    c(pre, post),\n    names_to = \"window\",\n    values_to = \"term\",\n    values_transform = ~ strsplit(., \" \", fixed = TRUE)\n  ) |&gt;\n  tidyr::unnest(term) |&gt;\n  dplyr::count(window, term, sort = TRUE)\n#&gt; # A tibble: 55 × 3\n#&gt;    window term         n\n#&gt;    &lt;chr&gt;  &lt;chr&gt;    &lt;int&gt;\n#&gt;  1 pre    方           9\n#&gt;  2 post   私           3\n#&gt;  3 pre    庭           3\n#&gt;  4 pre    私           3\n#&gt;  5 post   それから     2\n#&gt;  6 pre    奥さん       2\n#&gt;  7 post   お前         1\n#&gt;  8 post   この間       1\n#&gt;  9 post   しかし       1\n#&gt; 10 post   そうして     1\n#&gt; # ℹ 45 more rows\n\n\n\n\n\nCode\nduckdb::dbDisconnect(con)\nduckdb::duckdb_shutdown(drv)\n\nsessioninfo::session_info(info = \"packages\")\n#&gt; ═ Session info ═══════════════════════════════════════════════════════════════\n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package            * version    date (UTC) lib source\n#&gt;  audubon              0.5.1.9001 2023-09-03 [1] https://paithiov909.r-universe.dev (R 4.3.1)\n#&gt;  blob                 1.2.4      2023-03-17 [1] RSPM (R 4.3.0)\n#&gt;  cachem               1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n#&gt;  cellranger           1.1.0      2016-07-27 [1] RSPM (R 4.3.0)\n#&gt;  cli                  3.6.2      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt;  colorspace           2.1-0      2023-01-23 [1] RSPM (R 4.3.0)\n#&gt;  crosstalk            1.2.1      2023-11-23 [1] RSPM (R 4.3.0)\n#&gt;  curl                 5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  DBI                * 1.2.2      2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;  dbplyr               2.4.0      2023-10-26 [1] RSPM (R 4.3.0)\n#&gt;  digest               0.6.34     2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;  dplyr                1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  duckdb             * 0.9.2-1    2023-11-28 [1] RSPM (R 4.3.2)\n#&gt;  ellipsis             0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n#&gt;  evaluate             0.23       2023-11-01 [1] CRAN (R 4.3.1)\n#&gt;  fansi                1.0.6      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  farver               2.1.1      2022-07-06 [1] RSPM (R 4.3.0)\n#&gt;  fastmap              1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n#&gt;  fastmatch            1.1-4      2023-08-18 [1] RSPM (R 4.3.0)\n#&gt;  generics             0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n#&gt;  ggplot2            * 3.5.0      2024-02-23 [1] CRAN (R 4.3.2)\n#&gt;  gibasa               1.1.0      2024-02-17 [1] https://paithiov909.r-universe.dev (R 4.3.2)\n#&gt;  glue                 1.7.0      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;  gtable               0.3.4      2023-08-21 [1] CRAN (R 4.3.1)\n#&gt;  htmltools            0.5.7      2023-11-03 [1] RSPM (R 4.3.0)\n#&gt;  htmlwidgets          1.6.4      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  httpgd               1.3.1      2023-01-30 [1] CRAN (R 4.3.0)\n#&gt;  janeaustenr          1.0.0      2022-08-26 [1] RSPM (R 4.3.0)\n#&gt;  jsonlite             1.8.8      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;  knitr                1.45       2023-10-30 [1] CRAN (R 4.3.1)\n#&gt;  labeling             0.4.3      2023-08-29 [1] RSPM (R 4.3.0)\n#&gt;  later                1.3.2      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  lattice              0.22-5     2023-10-24 [4] CRAN (R 4.3.1)\n#&gt;  lifecycle            1.0.4      2023-11-07 [1] RSPM (R 4.3.0)\n#&gt;  magrittr             2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n#&gt;  Matrix               1.6-3      2023-11-14 [4] CRAN (R 4.3.2)\n#&gt;  memoise              2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n#&gt;  mgcv                 1.9-1      2023-12-21 [4] CRAN (R 4.3.2)\n#&gt;  munsell              0.5.0      2018-06-12 [1] RSPM (R 4.3.0)\n#&gt;  nlme                 3.1-163    2023-08-09 [4] CRAN (R 4.3.1)\n#&gt;  nsyllable            1.0.1      2022-02-28 [1] RSPM (R 4.3.0)\n#&gt;  pillar               1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n#&gt;  pkgconfig            2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n#&gt;  purrr                1.0.2      2023-08-10 [1] RSPM (R 4.3.0)\n#&gt;  quanteda             3.3.1      2023-05-18 [1] RSPM (R 4.3.0)\n#&gt;  quanteda.textstats   0.96.4     2023-11-02 [1] CRAN (R 4.3.1)\n#&gt;  R.cache              0.16.0     2022-07-21 [1] CRAN (R 4.3.0)\n#&gt;  R.methodsS3          1.8.2      2022-06-13 [1] CRAN (R 4.3.0)\n#&gt;  R.oo                 1.26.0     2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  R.utils              2.12.3     2023-11-18 [1] CRAN (R 4.3.2)\n#&gt;  R6                   2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n#&gt;  Rcpp                 1.0.12     2024-01-09 [1] RSPM (R 4.3.0)\n#&gt;  RcppParallel         5.1.7      2023-02-27 [1] CRAN (R 4.3.0)\n#&gt;  reactable            0.4.4      2023-03-12 [1] RSPM (R 4.3.0)\n#&gt;  reactablefmtr        2.0.0      2022-03-16 [1] RSPM (R 4.3.2)\n#&gt;  reactR               0.5.0      2023-10-11 [1] RSPM (R 4.3.0)\n#&gt;  readxl               1.4.3      2023-07-06 [1] RSPM (R 4.3.0)\n#&gt;  rlang                1.1.3      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  rmarkdown            2.25       2023-09-18 [1] RSPM (R 4.3.0)\n#&gt;  sass                 0.4.8      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  scales               1.3.0      2023-11-28 [1] RSPM (R 4.3.0)\n#&gt;  sessioninfo          1.2.2      2021-12-06 [1] RSPM (R 4.3.0)\n#&gt;  SnowballC            0.7.1      2023-04-25 [1] RSPM (R 4.3.0)\n#&gt;  stopwords            2.3        2021-10-28 [1] RSPM (R 4.3.0)\n#&gt;  stringi              1.8.3      2024-01-28 [1] https://gagolews.r-universe.dev (R 4.3.2)\n#&gt;  styler               1.10.2     2023-08-29 [1] RSPM (R 4.3.0)\n#&gt;  systemfonts          1.0.5      2023-10-09 [1] RSPM (R 4.3.0)\n#&gt;  tibble               3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n#&gt;  tidyr                1.3.1      2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  tidyselect           1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n#&gt;  tidytext             0.4.1      2023-01-07 [1] RSPM (R 4.3.0)\n#&gt;  tokenizers           0.3.0      2022-12-22 [1] RSPM (R 4.3.0)\n#&gt;  utf8                 1.2.4      2023-10-22 [1] RSPM (R 4.3.0)\n#&gt;  V8                   4.4.2      2024-02-15 [1] CRAN (R 4.3.2)\n#&gt;  vctrs                0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;  withr                3.0.0      2024-01-16 [1] RSPM (R 4.3.0)\n#&gt;  xfun                 0.42       2024-02-08 [1] CRAN (R 4.3.2)\n#&gt;  yaml                 2.3.8      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt; \n#&gt;  [1] /home/paithiov909/R/x86_64-pc-linux-gnu-library/4.3\n#&gt;  [2] /usr/local/lib/R/site-library\n#&gt;  [3] /usr/lib/R/site-library\n#&gt;  [4] /usr/lib/R/library\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>抽出語メニュー1</span>"
    ]
  },
  {
    "objectID": "words-menu-2.html",
    "href": "words-menu-2.html",
    "title": "3  抽出語メニュー2",
    "section": "",
    "text": "3.1 関連語検索（A.5.6）",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>抽出語メニュー2</span>"
    ]
  },
  {
    "objectID": "words-menu-2.html#関連語検索a.5.6",
    "href": "words-menu-2.html#関連語検索a.5.6",
    "title": "3  抽出語メニュー2",
    "section": "",
    "text": "3.1.1 関連語のリスト\n「確率差」や「確率比」については、いちおう計算はできた気がするが、あっているのかよくわからない。また、このやり方はそれなりの数の共起について計算をしなければならず、共起行列が大きくなると大変そう。\n\n\nCode\ndfm &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    section == \"[1]上_先生と私\",\n    pos %in% c(\n      \"名詞\", # \"名詞B\", \"名詞C\",\n      \"地名\", \"人名\", \"組織名\", \"固有名詞\",\n      \"動詞\", \"未知語\", \"タグ\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::count(doc_id, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::cast_dfm(doc_id, token, n) |&gt;\n  quanteda::dfm_weight(scheme = \"boolean\")\n\ndat &lt;- dfm |&gt;\n  quanteda::fcm() |&gt;\n  tidytext::tidy() |&gt;\n  dplyr::rename(target = document, co_occur = count) |&gt;\n  dplyr::reframe(\n    term = term,\n    target_occur = quanteda::colSums(dfm)[target],\n    term_occur = quanteda::colSums(dfm)[term],\n    co_occur = co_occur,\n    .by = target\n  ) |&gt;\n  dplyr::mutate(\n    p_x = target_occur / quanteda::ndoc(dfm),\n    p_y = term_occur / quanteda::ndoc(dfm),\n    p_xy = (co_occur / quanteda::ndoc(dfm)) / p_x,\n    differential = p_xy - p_y, # 確率差\n    lift = p_xy / p_y, # 確率比（リフト）,\n    jaccard = co_occur / (target_occur + term_occur - co_occur),\n    dice = 2 * co_occur / (target_occur + term_occur)\n  ) |&gt;\n  dplyr::select(target, term, differential, lift, jaccard, dice)\n\ndat\n#&gt; # A tibble: 26,820 × 6\n#&gt;    target    term        differential   lift jaccard   dice\n#&gt;    &lt;chr&gt;     &lt;chr&gt;              &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1 書く/動詞 心持/名詞         0.0553  3.56   0.0417 0.08  \n#&gt;  2 書く/動詞 建てる/動詞       0.0733 21.4    0.0714 0.133 \n#&gt;  3 書く/動詞 地位/名詞         0.0733 21.4    0.0714 0.133 \n#&gt;  4 書く/動詞 来る/動詞         0.0819  2.14   0.0392 0.0755\n#&gt;  5 書く/動詞 一言/名詞         0.0733 21.4    0.0714 0.133 \n#&gt;  6 書く/動詞 見る/動詞         0.121   2.10   0.0423 0.0811\n#&gt;  7 書く/動詞 思う/動詞         0.182   2.44   0.0506 0.0964\n#&gt;  8 書く/動詞 出る/動詞        -0.0166  0.822  0.0156 0.0308\n#&gt;  9 書く/動詞 先生/名詞         0.0618  1.13   0.0258 0.0504\n#&gt; 10 書く/動詞 帰る/動詞         0.309   5.09   0.1    0.182 \n#&gt; # ℹ 26,810 more rows\n\n\n\n\n3.1.2 共起ネットワーク\n「先生/名詞」と関連の強そうな語の共起を図示した例。\n「先生/名詞」と共起している語のうち、出現回数が上位20位以内である語がtargetである共起を抽出したうえで、それらのなかからJaccard係数が大きい順に75個だけ残している。「先生/名詞」という語そのものは図に含めていない。\n\n\nCode\ndat |&gt;\n  dplyr::inner_join(\n    dplyr::filter(dat, target == \"先生/名詞\") |&gt; dplyr::select(term),\n    by = dplyr::join_by(target == term)\n  ) |&gt;\n  dplyr::filter(target %in% names(quanteda::topfeatures(dfm, 20))) |&gt;\n  dplyr::slice_max(jaccard, n = 75) |&gt;\n  tidygraph::as_tbl_graph(directed = FALSE) |&gt;\n  tidygraph::to_minimum_spanning_tree() |&gt;\n  purrr::pluck(\"mst\") |&gt;\n  dplyr::mutate(\n    community = factor(tidygraph::group_leading_eigen())\n  ) |&gt;\n  ggraph::ggraph(layout = \"fr\") +\n  ggraph::geom_edge_link(aes(width = sqrt(lift), alpha = jaccard)) +\n  ggraph::geom_node_point(aes(colour = community), show.legend = FALSE) +\n  ggraph::geom_node_text(aes(label = name, colour = community), repel = TRUE, show.legend = FALSE) +\n  ggraph::theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n3.1.3 アソシエーション分析🍳\n英語だとこのメニューの名前は「Word Association」となっているので、ふつうにアソシエーション分析すればいいと思った。\narulesのtransactionsオブジェクトをつくるには、quantedaのfcmオブジェクトから変換すればよい（arulesをアタッチしている必要がある）。\n\n\nCode\nlibrary(arules)\nlibrary(arulesViz)\n\ndat &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    pos %in% c(\n      \"名詞\", # \"名詞B\", \"名詞C\",\n      \"地名\", \"人名\", \"組織名\", \"固有名詞\",\n      \"動詞\", \"未知語\", \"タグ\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::count(doc_id, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::cast_dfm(doc_id, token, n) |&gt;\n  quanteda::dfm_weight(scheme = \"boolean\") |&gt;\n  quanteda::fcm() |&gt;\n  as(\"nMatrix\") |&gt;\n  as(\"transactions\")\n\n\narules::apriori()でアソシエーションルールを抽出する。\n\n\nCode\nrules &lt;-\n  arules::apriori(\n    dat,\n    parameter = list(\n      support = 0.075,\n      confidence = 0.8,\n      minlen = 2,\n      maxlen = 2, # LHS+RHSの長さ。変えないほうがよい\n      maxtime = 5\n    ),\n    control = list(verbose = FALSE)\n  )\n\n\nこの形式のオブジェクトはas(rules, \"data.frame\")のようにしてデータフレームに変換できる。tibbleにしたい場合には次のようにすればよい。\n\n\nCode\nas(rules, \"data.frame\") |&gt;\n  dplyr::mutate(across(where(is.numeric), ~ signif(., digits = 3))) |&gt;\n  tidyr::separate_wider_delim(rules, delim = \" =&gt; \", names = c(\"lhs\", \"rhs\")) |&gt;\n  dplyr::arrange(desc(lift))\n#&gt; # A tibble: 65 × 7\n#&gt;    lhs           rhs         support confidence coverage  lift count\n#&gt;    &lt;chr&gt;         &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 {手紙/名詞}   {書く/動詞}  0.127       0.821   0.155   4.14   375\n#&gt;  2 {向う/動詞}   {K/未知語}   0.0839      0.832   0.101   2.43   247\n#&gt;  3 {掛ける/動詞} {聞く/動詞}  0.0754      0.835   0.0904  2.13   222\n#&gt;  4 {黙る/動詞}   {聞く/動詞}  0.103       0.83    0.124   2.12   303\n#&gt;  5 {始める/動詞} {聞く/動詞}  0.0788      0.806   0.0978  2.05   232\n#&gt;  6 {掛ける/動詞} {出る/動詞}  0.0768      0.85    0.0904  1.88   226\n#&gt;  7 {過ぎる/動詞} {自分/名詞}  0.0778      0.898   0.0866  1.87   229\n#&gt;  8 {考え/名詞}   {自分/名詞}  0.0798      0.88    0.0907  1.83   235\n#&gt;  9 {ぎり/未知語} {出る/動詞}  0.0761      0.827   0.0921  1.83   224\n#&gt; 10 {始める/動詞} {出る/動詞}  0.0791      0.809   0.0978  1.79   233\n#&gt; # ℹ 55 more rows\n\n\n\n\n3.1.4 散布図🍳\n\n\nCode\nplot(rules, engine = \"html\")\n#&gt; To reduce overplotting, jitter is added! Use jitter = 0 to prevent jitter.\n\n\n\n\n\n\n\n\n3.1.5 バルーンプロット🍳\n\n\nCode\nplot(rules, method = \"grouped\", engine = \"html\")\n\n\n\n\n\n\n\n\n3.1.6 ネットワーク図🍳\n\n\nCode\nplot(rules, method = \"graph\", engine = \"html\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>抽出語メニュー2</span>"
    ]
  },
  {
    "objectID": "words-menu-2.html#対応分析a.5.7",
    "href": "words-menu-2.html#対応分析a.5.7",
    "title": "3  抽出語メニュー2",
    "section": "3.2 対応分析（A.5.7）",
    "text": "3.2 対応分析（A.5.7）\n\n3.2.1 コレスポンデンス分析\n段落（doc_id）内の頻度で語彙を削ってから部（section）ごとに集計するために、ややめんどうなことをしている。\n\n\nCode\ndfm &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    pos %in% c(\n      \"名詞\", \"名詞B\", \"名詞C\",\n      \"地名\", \"人名\", \"組織名\", \"固有名詞\",\n      \"動詞\", \"未知語\", \"タグ\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::count(doc_id, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::cast_dfm(doc_id, token, n) |&gt;\n  quanteda::dfm_trim(\n    min_termfreq = 75,\n    termfreq_type = \"rank\",\n    min_docfreq = 30,\n    docfreq_type = \"count\"\n  )\n\n\nこうしてdoc_idごとに集計したdfmオブジェクトを一度tidytext::tidy()して3つ組のデータフレームに戻し、sectionのラベルを結合する。このデータフレームをもう一度tidytext::cast_dfm()で疎行列に変換して、quanteda.textmodels::textmodel_ca()を使って対応分析にかける。\n\n\nCode\nca_fit &lt;- dfm |&gt;\n  tidytext::tidy() |&gt;\n  dplyr::left_join(\n    dplyr::select(tbl, doc_id, section),\n    by = dplyr::join_by(document == doc_id)\n  ) |&gt;\n  tidytext::cast_dfm(section, term, count) |&gt;\n  quanteda.textmodels::textmodel_ca(nd = 2, sparse = TRUE)\n\n\nこの関数は疎行列に対して計算をおこなえるため、比較的大きな行列を渡しても大丈夫。\n\n\n3.2.2 バイプロット\ncaパッケージを読み込んでいるとplot()でバイプロットを描ける。factoextra::fviz_ca_biplot()でも描けるが、見た目はplot()のとあまり変わらない。\n\n\nCode\nlibrary(ca)\ndat &lt;- plot(ca_fit)\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 バイプロット（バブルプロット）\nggplot2でバイプロットを描画するには、たとえば次のようにする。ggrepel::geom_text_repelでラベルを出す語彙の選択の仕方はもうすこし工夫したほうがよいかもしれない。\nなお、このコードはCorrespondence Analysis visualization using ggplot | R-bloggersを参考にした。\n\n\nCode\ntf &lt;- dfm |&gt;\n  tidytext::tidy() |&gt;\n  dplyr::left_join(\n    dplyr::select(tbl, doc_id, section),\n    by = dplyr::join_by(document == doc_id)\n  ) |&gt;\n  dplyr::summarise(tf = sum(count), .by = term) |&gt;\n  dplyr::pull(tf, term)\n\n# modified from https://www.r-bloggers.com/2019/08/correspondence-analysis-visualization-using-ggplot/\nmake_ca_plot_df &lt;- function(ca.plot.obj, row.lab = \"Rows\", col.lab = \"Columns\") {\n  tibble::tibble(\n    Label = c(\n      rownames(ca.plot.obj$rows),\n      rownames(ca.plot.obj$cols)\n    ),\n    Dim1 = c(\n      ca.plot.obj$rows[, 1],\n      ca.plot.obj$cols[, 1]\n    ),\n    Dim2 = c(\n      ca.plot.obj$rows[, 2],\n      ca.plot.obj$cols[, 2]\n    ),\n    Variable = c(\n      rep(row.lab, nrow(ca.plot.obj$rows)),\n      rep(col.lab, nrow(ca.plot.obj$cols))\n    )\n  )\n}\ndat &lt;- dat |&gt;\n  make_ca_plot_df(row.lab = \"Construction\", col.lab = \"Medium\") |&gt;\n  dplyr::mutate(\n    Size = dplyr::if_else(Variable == \"Construction\", mean(tf), tf[Label])\n  )\n# 非ASCII文字のラベルに対してwarningを出さないようにする\nsuppressWarnings({\n  ca_sum &lt;- summary(ca_fit)\n  dim_var_percs &lt;- ca_sum$scree[, \"values2\"]\n})\n\ndat |&gt;\n  ggplot(aes(x = Dim1, y = Dim2, col = Variable, label = Label)) +\n  geom_vline(xintercept = 0, lty = \"dashed\", alpha = .5) +\n  geom_hline(yintercept = 0, lty = \"dashed\", alpha = .5) +\n  geom_jitter(aes(size = Size), alpha = .3, show.legend = FALSE) +\n  ggrepel::geom_label_repel(\n    data = \\(x) dplyr::filter(x, Variable == \"Construction\"),\n    show.legend = FALSE\n  ) +\n  ggrepel::geom_text_repel(\n    data = \\(x) dplyr::filter(x, Variable == \"Medium\", sqrt(Dim1^2 + Dim2^2) &gt; 0.25),\n    show.legend = FALSE\n  ) +\n  scale_x_continuous(\n    limits = range(dat$Dim1) +\n      c(diff(range(dat$Dim1)) * -0.2, diff(range(dat$Dim1)) * 0.2)\n  ) +\n  scale_y_continuous(\n    limits = range(dat$Dim2) +\n      c(diff(range(dat$Dim2)) * -0.2, diff(range(dat$Dim2)) * 0.2)\n  ) +\n  scale_size_area(max_size = 16) +\n  labs(\n    x = paste0(\"Dimension 1 (\", signif(dim_var_percs[1], 3), \"%)\"),\n    y = paste0(\"Dimension 2 (\", signif(dim_var_percs[2], 3), \"%)\")\n  ) +\n  theme_classic()\n#&gt; Warning: ggrepel: 22 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>抽出語メニュー2</span>"
    ]
  },
  {
    "objectID": "words-menu-2.html#多次元尺度構成法a.5.8",
    "href": "words-menu-2.html#多次元尺度構成法a.5.8",
    "title": "3  抽出語メニュー2",
    "section": "3.3 多次元尺度構成法（A.5.8）",
    "text": "3.3 多次元尺度構成法（A.5.8）\n\n3.3.1 MDS・バブルプロット\nMASS::isoMDSよりMASS::sammonのほうがたぶん見やすい。\n\n\nCode\nsimil &lt;- dfm |&gt;\n  quanteda::dfm_weight(scheme = \"boolean\") |&gt;\n  proxyC::simil(margin = 2, method = \"jaccard\")\n\ndat &lt;- MASS::sammon(1 - simil, k = 2) |&gt;\n  purrr::pluck(\"points\")\n#&gt; Initial stress        : 0.62279\n#&gt; stress after   0 iters: 0.62279\n\n\n\n\nCode\ndat &lt;- dat |&gt;\n  as.data.frame() |&gt;\n  tibble::rownames_to_column(\"label\") |&gt;\n  dplyr::rename(Dim1 = V1, Dim2 = V2) |&gt;\n  dplyr::mutate(\n    size = tf[label],\n    clust = (hclust(\n      proxyC::dist(dat, method = \"euclidean\") |&gt; as.dist(),\n      method = \"ward.D2\"\n    ) |&gt; cutree(k = 6))[label]\n  )\n\ndat |&gt;\n  ggplot(aes(x = Dim1, y = Dim2, label = label, col = factor(clust))) +\n  geom_point(aes(size = size), alpha = .3, show.legend = FALSE) +\n  ggrepel::geom_text_repel(show.legend = FALSE) +\n  scale_size_area(max_size = 16) +\n  theme_classic()\n#&gt; Warning: ggrepel: 23 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 MDS・3次元プロット\nrglではなくplotlyで試してみたが、とくに見やすいということはなかったかもしれない。\n\n\nCode\ndat &lt;- MASS::sammon(1 - simil, k = 3) |&gt;\n  purrr::pluck(\"points\") |&gt;\n  as.data.frame() |&gt;\n  tibble::rownames_to_column(\"label\") |&gt;\n  dplyr::rename(Dim1 = V1, Dim2 = V2, Dim3 = V3) |&gt;\n  dplyr::mutate(term_freq = tf[label])\n#&gt; Initial stress        : 0.53925\n#&gt; stress after  10 iters: 0.18929, magic = 0.092\n#&gt; stress after  20 iters: 0.14417, magic = 0.043\n#&gt; stress after  21 iters: 0.13794\n\n\n\n\nCode\ndat |&gt;\n  plotly::plot_ly(x = ~Dim1, y = ~Dim2, z = ~Dim3, text = ~label, color = ~term_freq) |&gt;\n  plotly::add_markers(opacity = .5)\n\n\n\n\n\n\n\n\n\nCode\nduckdb::dbDisconnect(con)\nduckdb::duckdb_shutdown(drv)\n\nsessioninfo::session_info(info = \"packages\")\n#&gt; ═ Session info ═══════════════════════════════════════════════════════════════\n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package      * version    date (UTC) lib source\n#&gt;  arules       * 1.7-7      2023-11-29 [1] RSPM (R 4.3.0)\n#&gt;  arulesViz    * 1.5-2      2023-03-07 [1] RSPM (R 4.3.0)\n#&gt;  audubon        0.5.1.9001 2023-09-03 [1] https://paithiov909.r-universe.dev (R 4.3.1)\n#&gt;  blob           1.2.4      2023-03-17 [1] RSPM (R 4.3.0)\n#&gt;  ca           * 0.71.1     2020-01-24 [1] RSPM (R 4.3.0)\n#&gt;  cachem         1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n#&gt;  cellranger     1.1.0      2016-07-27 [1] RSPM (R 4.3.0)\n#&gt;  cli            3.6.2      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt;  codetools      0.2-19     2023-02-01 [4] CRAN (R 4.2.2)\n#&gt;  colorspace     2.1-0      2023-01-23 [1] RSPM (R 4.3.0)\n#&gt;  crosstalk      1.2.1      2023-11-23 [1] RSPM (R 4.3.0)\n#&gt;  curl           5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  data.table     1.15.0     2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;  DBI          * 1.2.2      2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;  dbplyr         2.4.0      2023-10-26 [1] RSPM (R 4.3.0)\n#&gt;  digest         0.6.34     2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;  dplyr          1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  duckdb       * 0.9.2-1    2023-11-28 [1] RSPM (R 4.3.2)\n#&gt;  ellipsis       0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n#&gt;  evaluate       0.23       2023-11-01 [1] CRAN (R 4.3.1)\n#&gt;  fansi          1.0.6      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  farver         2.1.1      2022-07-06 [1] RSPM (R 4.3.0)\n#&gt;  fastmap        1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n#&gt;  fastmatch      1.1-4      2023-08-18 [1] RSPM (R 4.3.0)\n#&gt;  foreach        1.5.2      2022-02-02 [1] RSPM (R 4.3.0)\n#&gt;  generics       0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n#&gt;  ggforce        0.4.2      2024-02-19 [1] RSPM (R 4.3.0)\n#&gt;  ggplot2      * 3.5.0      2024-02-23 [1] CRAN (R 4.3.2)\n#&gt;  ggraph         2.2.0      2024-02-27 [1] CRAN (R 4.3.2)\n#&gt;  ggrepel        0.9.5      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  gibasa         1.1.0      2024-02-17 [1] https://paithiov909.r-universe.dev (R 4.3.2)\n#&gt;  glue           1.7.0      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;  graphlayouts   1.1.0      2024-01-19 [1] RSPM (R 4.3.0)\n#&gt;  gridExtra      2.3        2017-09-09 [1] RSPM (R 4.3.0)\n#&gt;  gtable         0.3.4      2023-08-21 [1] CRAN (R 4.3.1)\n#&gt;  htmltools      0.5.7      2023-11-03 [1] RSPM (R 4.3.0)\n#&gt;  htmlwidgets    1.6.4      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  httpgd         1.3.1      2023-01-30 [1] CRAN (R 4.3.0)\n#&gt;  httr           1.4.7      2023-08-15 [1] RSPM (R 4.3.0)\n#&gt;  igraph         2.0.2      2024-02-17 [1] RSPM (R 4.3.0)\n#&gt;  iterators      1.0.14     2022-02-05 [1] RSPM (R 4.3.0)\n#&gt;  janeaustenr    1.0.0      2022-08-26 [1] RSPM (R 4.3.0)\n#&gt;  jsonlite       1.8.8      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;  knitr          1.45       2023-10-30 [1] CRAN (R 4.3.1)\n#&gt;  labeling       0.4.3      2023-08-29 [1] RSPM (R 4.3.0)\n#&gt;  later          1.3.2      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  lattice        0.22-5     2023-10-24 [4] CRAN (R 4.3.1)\n#&gt;  lazyeval       0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n#&gt;  lifecycle      1.0.4      2023-11-07 [1] RSPM (R 4.3.0)\n#&gt;  magrittr       2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n#&gt;  MASS           7.3-60     2023-05-04 [4] CRAN (R 4.3.1)\n#&gt;  Matrix       * 1.6-3      2023-11-14 [4] CRAN (R 4.3.2)\n#&gt;  memoise        2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n#&gt;  munsell        0.5.0      2018-06-12 [1] RSPM (R 4.3.0)\n#&gt;  pillar         1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n#&gt;  pkgconfig      2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n#&gt;  plotly         4.10.4     2024-01-13 [1] RSPM (R 4.3.0)\n#&gt;  polyclip       1.10-6     2023-09-27 [1] RSPM (R 4.3.0)\n#&gt;  proxyC         0.3.4      2023-10-25 [1] RSPM (R 4.3.0)\n#&gt;  purrr          1.0.2      2023-08-10 [1] RSPM (R 4.3.0)\n#&gt;  quanteda       3.3.1      2023-05-18 [1] RSPM (R 4.3.0)\n#&gt;  R.cache        0.16.0     2022-07-21 [1] CRAN (R 4.3.0)\n#&gt;  R.methodsS3    1.8.2      2022-06-13 [1] CRAN (R 4.3.0)\n#&gt;  R.oo           1.26.0     2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  R.utils        2.12.3     2023-11-18 [1] CRAN (R 4.3.2)\n#&gt;  R6             2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n#&gt;  Rcpp           1.0.12     2024-01-09 [1] RSPM (R 4.3.0)\n#&gt;  RcppParallel   5.1.7      2023-02-27 [1] CRAN (R 4.3.0)\n#&gt;  readxl         1.4.3      2023-07-06 [1] RSPM (R 4.3.0)\n#&gt;  registry       0.5-1      2019-03-05 [1] RSPM (R 4.3.0)\n#&gt;  rlang          1.1.3      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  rmarkdown      2.25       2023-09-18 [1] RSPM (R 4.3.0)\n#&gt;  scales         1.3.0      2023-11-28 [1] RSPM (R 4.3.0)\n#&gt;  seriation      1.5.4      2023-12-12 [1] RSPM (R 4.3.0)\n#&gt;  sessioninfo    1.2.2      2021-12-06 [1] RSPM (R 4.3.0)\n#&gt;  SnowballC      0.7.1      2023-04-25 [1] RSPM (R 4.3.0)\n#&gt;  stopwords      2.3        2021-10-28 [1] RSPM (R 4.3.0)\n#&gt;  stringi        1.8.3      2024-01-28 [1] https://gagolews.r-universe.dev (R 4.3.2)\n#&gt;  stringr        1.5.1      2023-11-14 [1] RSPM (R 4.3.0)\n#&gt;  styler         1.10.2     2023-08-29 [1] RSPM (R 4.3.0)\n#&gt;  systemfonts    1.0.5      2023-10-09 [1] RSPM (R 4.3.0)\n#&gt;  tibble         3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n#&gt;  tidygraph      1.3.1      2024-01-30 [1] RSPM (R 4.3.0)\n#&gt;  tidyr          1.3.1      2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  tidyselect     1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n#&gt;  tidytext       0.4.1      2023-01-07 [1] RSPM (R 4.3.0)\n#&gt;  tokenizers     0.3.0      2022-12-22 [1] RSPM (R 4.3.0)\n#&gt;  TSP            1.2-4      2023-04-04 [1] RSPM (R 4.3.0)\n#&gt;  tweenr         2.0.3      2024-02-26 [1] CRAN (R 4.3.2)\n#&gt;  utf8           1.2.4      2023-10-22 [1] RSPM (R 4.3.0)\n#&gt;  V8             4.4.2      2024-02-15 [1] CRAN (R 4.3.2)\n#&gt;  vctrs          0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;  viridis        0.6.5      2024-01-29 [1] RSPM (R 4.3.0)\n#&gt;  viridisLite    0.4.2      2023-05-02 [1] RSPM (R 4.3.0)\n#&gt;  visNetwork     2.1.2      2022-09-29 [1] RSPM (R 4.3.0)\n#&gt;  withr          3.0.0      2024-01-16 [1] RSPM (R 4.3.0)\n#&gt;  xfun           0.42       2024-02-08 [1] CRAN (R 4.3.2)\n#&gt;  yaml           2.3.8      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt; \n#&gt;  [1] /home/paithiov909/R/x86_64-pc-linux-gnu-library/4.3\n#&gt;  [2] /usr/local/lib/R/site-library\n#&gt;  [3] /usr/lib/R/site-library\n#&gt;  [4] /usr/lib/R/library\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>抽出語メニュー2</span>"
    ]
  },
  {
    "objectID": "words-menu-3.html",
    "href": "words-menu-3.html",
    "title": "4  抽出語メニュー3",
    "section": "",
    "text": "4.1 階層的クラスター分析（A.5.9）",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>抽出語メニュー3</span>"
    ]
  },
  {
    "objectID": "words-menu-3.html#階層的クラスター分析a.5.9",
    "href": "words-menu-3.html#階層的クラスター分析a.5.9",
    "title": "4  抽出語メニュー3",
    "section": "",
    "text": "4.1.1 非類似度のヒートマップ🍳\nJaccard係数を指定して非類似度のヒートマップを描くと、そもそもパターンがほとんど見えなかった。\n\n\nCode\ndfm &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    pos %in% c(\n      \"名詞\", # \"名詞B\", \"名詞C\",\n      \"地名\", \"人名\", \"組織名\", \"固有名詞\",\n      \"動詞\", \"未知語\", \"タグ\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::count(doc_id, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::cast_dfm(doc_id, token, n)\n\ndat &lt;- dfm |&gt;\n  quanteda::dfm_trim(min_termfreq = 30, termfreq_type = \"rank\") |&gt;\n  quanteda::dfm_weight(scheme = \"boolean\") |&gt;\n  proxyC::simil(margin = 2, method = \"dice\") |&gt;\n  rlang::as_function(~ 1 - .)()\n\nfactoextra::fviz_dist(as.dist(dat))\n#&gt; Warning in vp$just: 'just' の 'justification' への部分的マッチ\n\n\n\n\n\n\n\n\n\n\n\n4.1.2 階層的クラスタリング\n\n\nCode\nclusters &lt;-\n  as.dist(dat) |&gt;\n  hclust(method = \"ward.D2\")\n\n\n\n\n4.1.3 シルエット分析🍳\n\n\nCode\nfactoextra::fviz_nbclust(\n  as.matrix(dat),\n  FUNcluster = factoextra::hcut,\n  k.max = ceiling(sqrt(nrow(dat)))\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncluster::silhouette(cutree(clusters, k = 5), dist = dat) |&gt;\n  factoextra::fviz_silhouette(print.summary = FALSE) +\n  theme_classic()\n#&gt; Warning in vp$just: 'just' の 'justification' への部分的マッチ\n\n\n\n\n\n\n\n\n\n\n\n4.1.4 デンドログラム\nデンドログラムについては、似たような表現を手軽に実現できる方法が見つけられない。ラベルの位置が左右反転しているが、factoextra::fviz_dend(horiz = TRUE)とするのが簡単かもしれない。\n\n\nCode\nfactoextra::fviz_dend(clusters, k = 5, horiz = TRUE, labels_track_height = 0.3)\n#&gt; Warning in seq.default(15, 375, length = k + 1): 'length' の 'length.out'\n#&gt; への部分的な引数のマッチング\n#&gt; Warning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\n#&gt; of ggplot2 3.3.4.\n#&gt; ℹ The deprecated feature was likely used in the factoextra package.\n#&gt;   Please report the issue at &lt;https://github.com/kassambara/factoextra/issues&gt;.\n\n\n\n\n\n\n\n\n\n\n\n4.1.5 デンドログラムと棒グラフ\nKH Coderのソースコードを見た感じ、デンドログラムと一緒に語の出現回数を描いている表現は、やや独特なことをしている。むしろ語の出現回数のほうが主な情報になってよいなら、ふつうの棒グラフの横にggh4x::scale_y_dendrogram()でデンドログラムを描くことができる。\n\n\nCode\ndfm |&gt;\n  quanteda::dfm_trim(min_termfreq = 30, termfreq_type = \"rank\") |&gt;\n  quanteda::colSums() |&gt;\n  tibble::enframe() |&gt;\n  dplyr::mutate(\n    clust = (clusters |&gt; cutree(k = 5))[name]\n  ) |&gt;\n  ggplot(aes(x = value, y = name, fill = factor(clust))) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  scale_x_sqrt() +\n  ggh4x::scale_y_dendrogram(hclust = clusters) +\n  labs(x = \"出現回数\", y = element_blank()) +\n  theme_bw()\n#&gt; Warning: The S3 guide system was deprecated in ggplot2 3.5.0.\n#&gt; ℹ It has been replaced by a ggproto system that can be extended.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>抽出語メニュー3</span>"
    ]
  },
  {
    "objectID": "words-menu-3.html#共起ネットワークa.5.10",
    "href": "words-menu-3.html#共起ネットワークa.5.10",
    "title": "4  抽出語メニュー3",
    "section": "4.2 共起ネットワーク（A.5.10）",
    "text": "4.2 共起ネットワーク（A.5.10）\n\n4.2.1 グラフの作成\n描画するグラフをtbl_graphとして作成する。\n\n\nCode\ndfm &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    pos %in% c(\n      \"名詞\", # \"名詞B\", \"名詞C\",\n      \"地名\", \"人名\", \"組織名\", \"固有名詞\",\n      \"動詞\", \"未知語\", \"タグ\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::count(doc_id, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::cast_dfm(doc_id, token, n)\n\ndat &lt;- dfm |&gt;\n  quanteda::dfm_trim(min_termfreq = 45, termfreq_type = \"count\") |&gt;\n  quanteda::dfm_weight(scheme = \"boolean\") |&gt;\n  proxyC::simil(margin = 2, method = \"jaccard\", rank = 3) |&gt;\n  as.matrix() |&gt;\n  tidygraph::as_tbl_graph(directed = FALSE) |&gt;\n  dplyr::distinct() |&gt; # 重複を削除\n  tidygraph::activate(edges) |&gt;\n  dplyr::filter(from != to)\n\ndat\n#&gt; # A tbl_graph: 47 nodes and 82 edges\n#&gt; #\n#&gt; # An undirected simple graph with 2 components\n#&gt; #\n#&gt; # Edge Data: 82 × 3 (active)\n#&gt;     from    to weight\n#&gt;    &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;\n#&gt;  1     1    12 0.132 \n#&gt;  2     1    38 0.123 \n#&gt;  3     2    30 0.0947\n#&gt;  4     2    43 0.0738\n#&gt;  5     3    19 0.131 \n#&gt;  6     3    46 0.131 \n#&gt;  7     4    12 0.163 \n#&gt;  8     4    19 0.171 \n#&gt;  9     4    34 0.0905\n#&gt; 10     4    40 0.141 \n#&gt; # ℹ 72 more rows\n#&gt; #\n#&gt; # Node Data: 47 × 1\n#&gt;   name     \n#&gt;   &lt;chr&gt;    \n#&gt; 1 東京/地名\n#&gt; 2 分る/動詞\n#&gt; 3 知る/動詞\n#&gt; # ℹ 44 more rows\n\n\n\n\n4.2.2 相関係数の計算\nエッジのalphaに渡す相関係数を計算する。このあたりのコードは書くのがなかなか難しかったので、あまりスマートなやり方ではないかもしれない。\nKH Coderには、それぞれの共起が文書集合内のどのあたりの位置に出現したかを概観できるようにするために、共起ネットワーク中のエッジについて、共起の出現位置との相関係数によって塗り分ける機能がある。これを実現するには、まずそれぞれの文書について文書集合内での通し番号を振ったうえで、それぞれの文書についてエッジとして描きたい共起の有無を1, 0で表してから、通し番号とのあいだの相関係数を計算するということをやる。\nまず、共起ネットワーク中に描きこむ共起と、それらを含む文書番号をリストアップした縦長のデータフレームをつくる。\n\n\nCode\nnodes &lt;- tidygraph::activate(dat, nodes) |&gt; dplyr::pull(\"name\")\nfrom &lt;- nodes[tidygraph::activate(dat, edges) |&gt; dplyr::pull(\"from\")]\nto &lt;- nodes[tidygraph::activate(dat, edges) |&gt; dplyr::pull(\"to\")]\n\nhas_coocurrences &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    pos %in% c(\n      \"名詞\", # \"名詞B\", \"名詞C\",\n      \"地名\", \"人名\", \"組織名\", \"固有名詞\",\n      \"動詞\", \"未知語\", \"タグ\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::filter(token %in% nodes) |&gt;\n  dplyr::collect() |&gt;\n  dplyr::reframe(\n    from = from,\n    to = to,\n    has_from = purrr::map_lgl(from, ~ . %in% token),\n    has_to = purrr::map_lgl(to, ~ . %in% token),\n    .by = doc_id\n  ) |&gt;\n  dplyr::filter(has_from & has_to) |&gt;\n  dplyr::group_by(from, to) |&gt;\n  dplyr::reframe(doc_id = doc_id)\n\nhas_coocurrences\n#&gt; # A tibble: 2,164 × 3\n#&gt;    from          to       doc_id\n#&gt;    &lt;chr&gt;         &lt;chr&gt;     &lt;int&gt;\n#&gt;  1 お嬢さん/名詞 K/未知語   1034\n#&gt;  2 お嬢さん/名詞 K/未知語   1035\n#&gt;  3 お嬢さん/名詞 K/未知語   1041\n#&gt;  4 お嬢さん/名詞 K/未知語   1042\n#&gt;  5 お嬢さん/名詞 K/未知語   1045\n#&gt;  6 お嬢さん/名詞 K/未知語   1046\n#&gt;  7 お嬢さん/名詞 K/未知語   1048\n#&gt;  8 お嬢さん/名詞 K/未知語   1049\n#&gt;  9 お嬢さん/名詞 K/未知語   1052\n#&gt; 10 お嬢さん/名詞 K/未知語   1054\n#&gt; # ℹ 2,154 more rows\n\n\n次に、このデータフレームを共起ごとにグルーピングして、共起の有無と通し番号とのあいだの相関係数を含むデータフレームをつくる。\n\n\nCode\ncorrelations &lt;- has_coocurrences |&gt;\n  dplyr::group_by(from, to) |&gt;\n  dplyr::group_map(\\(.x, .y) {\n    tibble::tibble(\n      doc_number = seq_len(nrow(tbl)),\n      from = which(nodes == .y$from),\n      to = which(nodes == .y$to)\n    ) |&gt;\n      dplyr::group_by(from, to) |&gt;\n      dplyr::reframe(\n        cor = cor(doc_number, as.numeric(doc_number %in% .x[[\"doc_id\"]]))\n      )\n  }) |&gt;\n  purrr::list_rbind()\n\ncorrelations\n#&gt; # A tibble: 82 × 3\n#&gt;     from    to     cor\n#&gt;    &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;\n#&gt;  1    43    46  0.292 \n#&gt;  2    43    44  0.141 \n#&gt;  3    10    15  0.104 \n#&gt;  4    10    34  0.0467\n#&gt;  5    20    46  0.246 \n#&gt;  6    20    43  0.199 \n#&gt;  7    32    43  0.158 \n#&gt;  8    32    41  0.104 \n#&gt;  9     8    17 -0.176 \n#&gt; 10     8    19 -0.127 \n#&gt; # ℹ 72 more rows\n\n\n最後に、相関係数をtbl_graphのエッジと結合する。\n\n\nCode\ndat &lt;- dat |&gt;\n  tidygraph::activate(edges) |&gt;\n  dplyr::left_join(correlations, by = dplyr::join_by(from == from, to == to))\n\n\n\n\n4.2.3 共起ネットワーク\n上の処理が間違っていなければ、文書集合の後のほうによく出てくる共起であるほど、エッジの色が濃くなっているはず。\n\n\nCode\ndat |&gt;\n  tidygraph::activate(nodes) |&gt;\n  dplyr::mutate(\n    community = factor(tidygraph::group_leading_eigen())\n  ) |&gt;\n  ggraph::ggraph(layout = \"fr\") +\n  ggraph::geom_edge_link2(\n    aes(\n      alpha = dplyr::percent_rank(cor) + .01, # パーセンタイルが0だと透明になってしまうので、適当に下駄をはかせる\n      width = dplyr::percent_rank(weight) + 1\n    ),\n    colour = \"red\"\n  ) +\n  ggraph::geom_node_point(aes(colour = community), show.legend = FALSE) +\n  ggraph::geom_node_label(aes(colour = community, label = name), repel = TRUE, show.legend = FALSE) +\n  ggraph::theme_graph()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>抽出語メニュー3</span>"
    ]
  },
  {
    "objectID": "words-menu-3.html#自己組織化マップa.5.11",
    "href": "words-menu-3.html#自己組織化マップa.5.11",
    "title": "4  抽出語メニュー3",
    "section": "4.3 自己組織化マップ（A.5.11）",
    "text": "4.3 自己組織化マップ（A.5.11）\n\n4.3.1 自己組織化マップ（SOM）\nSOMの実装としては、KH Coderはsomを使っているようだが、kohonenを使ったほうがよい。行列が非常に大きい場合にはkohonen::som(mode = \"online\")としてもよいのかもしれないが、一般にバッチ型のほうが収束が早く、数十ステップ程度回せば十分である。\n与える単語文書行列は、ここではtidytext::bind_tf_idf()を使ってTF-IDFで重みづけし、上位100語ほど抽出する。\n\n\nCode\ndat &lt;-\n  dplyr::tbl(con, \"tokens\") |&gt;\n  dplyr::filter(\n    pos %in% c(\n      \"名詞\", # \"名詞B\", \"名詞C\",\n      \"地名\", \"人名\", \"組織名\", \"固有名詞\",\n      \"動詞\", \"未知語\", \"タグ\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    token = dplyr::if_else(is.na(original), token, original),\n    token = paste(token, pos, sep = \"/\")\n  ) |&gt;\n  dplyr::count(doc_id, token) |&gt;\n  dplyr::collect() |&gt;\n  tidytext::bind_tf_idf(token, doc_id, n) |&gt;\n  tidytext::cast_dfm(doc_id, token, tf_idf) |&gt;\n  quanteda::dfm_trim(\n    min_termfreq = 100,\n    termfreq_type = \"rank\"\n  ) |&gt;\n  as.matrix() |&gt;\n  scale() |&gt;\n  t()\n\nsom_fit &lt;-\n  kohonen::som(\n    dat,\n    grid = kohonen::somgrid(16, 12, \"hexagonal\"),\n    rlen = 50, # 学習回数\n    alpha = c(0.05, 0.01),\n    radius = 6,\n    dist.fcts = \"sumofsquares\",\n    mode = \"pbatch\",\n    init = aweSOM::somInit(dat, 16, 12)\n  )\n#&gt; Warning in seq.default(along = data): 'along' の 'along.with'\n#&gt; への部分的な引数のマッチング\n#&gt; Warning in seq.default(along = whatmap): 'along' の 'along.with'\n#&gt; への部分的な引数のマッチング\n#&gt; Warning in seq.default(along = data): 'along' の 'along.with'\n#&gt; への部分的な引数のマッチング\n\n\n\n\nCode\naweSOM::somQuality(som_fit, dat)\n#&gt; \n#&gt; ## Quality measures:\n#&gt;  * Quantization error     :  336.8614 \n#&gt;  * (% explained variance) :  69.98 \n#&gt;  * Topographic error      :  0.25 \n#&gt;  * Kaski-Lagus error      :  37.66651 \n#&gt;  \n#&gt; ## Number of obs. per map cell:\n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 \n#&gt;   1   2   1   0   1   2   0   0   2   3   0   0   2   0   0   2   0   0   0   0 \n#&gt;  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   2   2   0 \n#&gt;  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 \n#&gt;   0   0   2   2   0   0   2   1   2   0   1   1   0   0   2   0   1   0   0   1 \n#&gt;  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 \n#&gt;   0   0   1   0   1   0   1   1   0   0   0   0   2   0   0   1   2   0   0   3 \n#&gt;  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 \n#&gt;   1   0   0   0   0   2   0   0   1   0   0   0   2   1   0   0   0   0   0   1 \n#&gt; 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 \n#&gt;   0   0   0   0   0   0   1   0   0   0   0   0   3   0   2   0   1   1   0   0 \n#&gt; 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 \n#&gt;   0   0   1   2   0   0   1   1   0   0   0   2   1   0   0   1   0   0   2   0 \n#&gt; 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 \n#&gt;   0   0   0   1   2   0   0   1   0   0   0   2   1   0   0   0   1   0   2   0 \n#&gt; 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 \n#&gt;   0   0   0   0   0   0   0   1   0   0   0   1   0   0   0   2   1   0   1   1 \n#&gt; 181 182 183 184 185 186 187 188 189 190 191 192 \n#&gt;   1   0   1   0   1   0   2   1   2   0   0   1\n\n\n\n\n4.3.2 U-Matrix\nU-matrixは「各ノードの参照ベクトルが近傍ノードと異なる度合いで色づけする方法」（自己組織化マップ入門）。暖色の箇所はデータ密度が低い「山間部」で、寒色の箇所はデータ密度が高い「平野部」みたいなイメージ、写像の勾配が急峻になっている箇所を境にしてクラスタが分かれていると判断するみたいな見方をする。\n\n\nCode\naweSOM::aweSOMsmoothdist(som_fit)\n#&gt; Warning in vp$just: 'just' の 'justification' への部分的マッチ\n\n\n\n\n\n\n\n\n\n\n\nCode\naweSOM::aweSOMplot(\n  som_fit,\n  data = dat,\n  type = \"UMatrix\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n4.3.3 ヒットマップ🍳\nclusters::pam()でクラスタリングして色を付ける。一部の「山間部」や「盆地」がクラスタになって、後はその他の部分みたいな感じに分かれるようだが、解釈するのに便利な感じで分かれてはくれなかった。\n\n\nCode\nclusters &lt;- som_fit |&gt;\n  purrr::pluck(\"codes\", 1) |&gt; # 参照ベクトル（codebook vectors）は`codes`にリストとして格納されている\n  cluster::pam(k = 8)\n\n\nヒットマップ（hitmap, proportion map）は以下のような可視化の方法。ノードの中の六角形は各ノードが保持する参照ベクトルの数（比率）を表している。ノードの背景色が上のコードで得たクラスタに対応する。\n\n\nCode\naweSOM::aweSOMplot(\n  som_fit,\n  data = dat,\n  type = \"Hitmap\",\n  superclass = clusters[[\"clustering\"]]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nduckdb::dbDisconnect(con)\nduckdb::duckdb_shutdown(drv)\n\nsessioninfo::session_info(info = \"packages\")\n#&gt; ═ Session info ═══════════════════════════════════════════════════════════════\n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package      * version    date (UTC) lib source\n#&gt;  abind          1.4-5      2016-07-21 [1] RSPM (R 4.3.0)\n#&gt;  audubon        0.5.1.9001 2023-09-03 [1] https://paithiov909.r-universe.dev (R 4.3.1)\n#&gt;  aweSOM         1.3        2022-08-30 [1] RSPM (R 4.3.0)\n#&gt;  backports      1.4.1      2021-12-13 [1] CRAN (R 4.3.0)\n#&gt;  blob           1.2.4      2023-03-17 [1] RSPM (R 4.3.0)\n#&gt;  broom          1.0.5      2023-06-09 [1] RSPM (R 4.3.0)\n#&gt;  cachem         1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n#&gt;  car            3.1-2      2023-03-30 [1] RSPM (R 4.3.0)\n#&gt;  carData        3.0-5      2022-01-06 [1] RSPM (R 4.3.0)\n#&gt;  cellranger     1.1.0      2016-07-27 [1] RSPM (R 4.3.0)\n#&gt;  class          7.3-22     2023-05-03 [4] CRAN (R 4.3.1)\n#&gt;  cli            3.6.2      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt;  cluster        2.1.6      2023-12-01 [4] CRAN (R 4.3.2)\n#&gt;  codetools      0.2-19     2023-02-01 [4] CRAN (R 4.2.2)\n#&gt;  colorspace     2.1-0      2023-01-23 [1] RSPM (R 4.3.0)\n#&gt;  curl           5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  DBI          * 1.2.2      2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;  dbplyr         2.4.0      2023-10-26 [1] RSPM (R 4.3.0)\n#&gt;  dendextend     1.17.1     2023-03-25 [1] RSPM (R 4.3.0)\n#&gt;  digest         0.6.34     2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;  dotCall64      1.1-1      2023-11-28 [1] RSPM (R 4.3.0)\n#&gt;  dplyr          1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  duckdb       * 0.9.2-1    2023-11-28 [1] RSPM (R 4.3.2)\n#&gt;  e1071          1.7-14     2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  ellipsis       0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n#&gt;  evaluate       0.23       2023-11-01 [1] CRAN (R 4.3.1)\n#&gt;  factoextra     1.0.7      2020-04-01 [1] RSPM (R 4.3.2)\n#&gt;  fansi          1.0.6      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  farver         2.1.1      2022-07-06 [1] RSPM (R 4.3.0)\n#&gt;  fastmap        1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n#&gt;  fastmatch      1.1-4      2023-08-18 [1] RSPM (R 4.3.0)\n#&gt;  fields         15.2       2023-08-17 [1] RSPM (R 4.3.0)\n#&gt;  generics       0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n#&gt;  ggdendro       0.2.0      2024-02-23 [1] CRAN (R 4.3.2)\n#&gt;  ggh4x          0.2.8      2024-01-23 [1] RSPM (R 4.3.0)\n#&gt;  ggplot2      * 3.5.0      2024-02-23 [1] CRAN (R 4.3.2)\n#&gt;  ggpubr         0.6.0      2023-02-10 [1] RSPM (R 4.3.0)\n#&gt;  ggrepel        0.9.5      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  ggsignif       0.6.4      2022-10-13 [1] RSPM (R 4.3.0)\n#&gt;  gibasa         1.1.0      2024-02-17 [1] https://paithiov909.r-universe.dev (R 4.3.2)\n#&gt;  glue           1.7.0      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;  gridExtra      2.3        2017-09-09 [1] RSPM (R 4.3.0)\n#&gt;  gtable         0.3.4      2023-08-21 [1] CRAN (R 4.3.1)\n#&gt;  htmltools      0.5.7      2023-11-03 [1] RSPM (R 4.3.0)\n#&gt;  htmlwidgets    1.6.4      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  httpgd         1.3.1      2023-01-30 [1] CRAN (R 4.3.0)\n#&gt;  httpuv         1.6.14     2024-01-26 [1] RSPM (R 4.3.0)\n#&gt;  igraph         2.0.2      2024-02-17 [1] RSPM (R 4.3.0)\n#&gt;  isoband        0.2.7      2022-12-20 [1] RSPM (R 4.3.0)\n#&gt;  janeaustenr    1.0.0      2022-08-26 [1] RSPM (R 4.3.0)\n#&gt;  jsonlite       1.8.8      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;  knitr          1.45       2023-10-30 [1] CRAN (R 4.3.1)\n#&gt;  kohonen        3.0.12     2023-06-09 [1] RSPM (R 4.3.0)\n#&gt;  labeling       0.4.3      2023-08-29 [1] RSPM (R 4.3.0)\n#&gt;  later          1.3.2      2023-12-06 [1] RSPM (R 4.3.0)\n#&gt;  lattice        0.22-5     2023-10-24 [4] CRAN (R 4.3.1)\n#&gt;  lifecycle      1.0.4      2023-11-07 [1] RSPM (R 4.3.0)\n#&gt;  magrittr       2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n#&gt;  maps           3.4.2      2023-12-15 [1] RSPM (R 4.3.0)\n#&gt;  MASS           7.3-60     2023-05-04 [4] CRAN (R 4.3.1)\n#&gt;  Matrix         1.6-3      2023-11-14 [4] CRAN (R 4.3.2)\n#&gt;  memoise        2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n#&gt;  mime           0.12       2021-09-28 [1] CRAN (R 4.3.0)\n#&gt;  munsell        0.5.0      2018-06-12 [1] RSPM (R 4.3.0)\n#&gt;  pillar         1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n#&gt;  pkgconfig      2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n#&gt;  plyr           1.8.9      2023-10-02 [1] RSPM (R 4.3.0)\n#&gt;  promises       1.2.1      2023-08-10 [1] RSPM (R 4.3.0)\n#&gt;  proxy          0.4-27     2022-06-09 [1] RSPM (R 4.3.0)\n#&gt;  proxyC         0.3.4      2023-10-25 [1] RSPM (R 4.3.0)\n#&gt;  purrr          1.0.2      2023-08-10 [1] RSPM (R 4.3.0)\n#&gt;  quanteda       3.3.1      2023-05-18 [1] RSPM (R 4.3.0)\n#&gt;  R.cache        0.16.0     2022-07-21 [1] CRAN (R 4.3.0)\n#&gt;  R.methodsS3    1.8.2      2022-06-13 [1] CRAN (R 4.3.0)\n#&gt;  R.oo           1.26.0     2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  R.utils        2.12.3     2023-11-18 [1] CRAN (R 4.3.2)\n#&gt;  R6             2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n#&gt;  RColorBrewer   1.1-3      2022-04-03 [1] RSPM (R 4.3.0)\n#&gt;  Rcpp           1.0.12     2024-01-09 [1] RSPM (R 4.3.0)\n#&gt;  RcppParallel   5.1.7      2023-02-27 [1] CRAN (R 4.3.0)\n#&gt;  readxl         1.4.3      2023-07-06 [1] RSPM (R 4.3.0)\n#&gt;  reshape2       1.4.4      2020-04-09 [1] RSPM (R 4.3.0)\n#&gt;  rlang          1.1.3      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  rmarkdown      2.25       2023-09-18 [1] RSPM (R 4.3.0)\n#&gt;  rstatix        0.7.2      2023-02-01 [1] RSPM (R 4.3.0)\n#&gt;  scales         1.3.0      2023-11-28 [1] RSPM (R 4.3.0)\n#&gt;  sessioninfo    1.2.2      2021-12-06 [1] RSPM (R 4.3.0)\n#&gt;  shiny          1.8.0      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  SnowballC      0.7.1      2023-04-25 [1] RSPM (R 4.3.0)\n#&gt;  spam           2.10-0     2023-10-23 [1] RSPM (R 4.3.0)\n#&gt;  stopwords      2.3        2021-10-28 [1] RSPM (R 4.3.0)\n#&gt;  stringi        1.8.3      2024-01-28 [1] https://gagolews.r-universe.dev (R 4.3.2)\n#&gt;  stringr        1.5.1      2023-11-14 [1] RSPM (R 4.3.0)\n#&gt;  styler         1.10.2     2023-08-29 [1] RSPM (R 4.3.0)\n#&gt;  systemfonts    1.0.5      2023-10-09 [1] RSPM (R 4.3.0)\n#&gt;  tibble         3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n#&gt;  tidygraph      1.3.1      2024-01-30 [1] RSPM (R 4.3.0)\n#&gt;  tidyr          1.3.1      2024-01-24 [1] RSPM (R 4.3.0)\n#&gt;  tidyselect     1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n#&gt;  tidytext       0.4.1      2023-01-07 [1] RSPM (R 4.3.0)\n#&gt;  tokenizers     0.3.0      2022-12-22 [1] RSPM (R 4.3.0)\n#&gt;  utf8           1.2.4      2023-10-22 [1] RSPM (R 4.3.0)\n#&gt;  V8             4.4.2      2024-02-15 [1] CRAN (R 4.3.2)\n#&gt;  vctrs          0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;  viridis        0.6.5      2024-01-29 [1] RSPM (R 4.3.0)\n#&gt;  viridisLite    0.4.2      2023-05-02 [1] RSPM (R 4.3.0)\n#&gt;  withr          3.0.0      2024-01-16 [1] RSPM (R 4.3.0)\n#&gt;  xfun           0.42       2024-02-08 [1] CRAN (R 4.3.2)\n#&gt;  xtable         1.8-4      2019-04-21 [1] RSPM (R 4.3.0)\n#&gt;  yaml           2.3.8      2023-12-11 [1] RSPM (R 4.3.0)\n#&gt; \n#&gt;  [1] /home/paithiov909/R/x86_64-pc-linux-gnu-library/4.3\n#&gt;  [2] /usr/local/lib/R/site-library\n#&gt;  [3] /usr/lib/R/site-library\n#&gt;  [4] /usr/lib/R/library\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>抽出語メニュー3</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Note\n\n\n\n本文の内容に関連する情報をまとめたリストです。いわゆる「参考文献リスト」ではありません\n\n\n\nアソシエーション分析\n\nChapter 5 Association Analysis: Basic Concepts and Algorithms | An R Companion for Introduction to Data Mining\nR でアソシエーション分析 #R - Qiita\n\n自己組織化マップ\n\naweSOM\n自己組織化マップ入門\n自己組織化マップ - 脳科学辞典",
    "crumbs": [
      "References"
    ]
  }
]